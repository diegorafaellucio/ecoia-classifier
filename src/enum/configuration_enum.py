from enum import Enum


from src.enum.detection_approach_enum import DetectionApproachEnum

class ConfigurationEnum(Enum):
    DEVICE = ('DEVICE','cpu')

    SKELETON_CLASSIFICATION_WEIGHTS_PATH = ('SKELETON_CLASSIFICATION_WEIGHTS_PATH','data/models/skeleton/weight.pt')
    SKELETON_CLASSIFICATION_APPROACH = ('SKELETON_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    FILTER_CLASSIFICATION_WEIGHTS_PATH = ('FILTER_CLASSIFICATION_WEIGHTS_PATH','data/models/filter/weight.pt')
    FILTER_CLASSIFICATION_APPROACH = ('FILTER_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    MEAT_CLASSIFICATION_WEIGHTS_PATH = ('MEAT_CLASSIFICATION_WEIGHTS_PATH','data/models/meat/weight.pt')
    MEAT_CLASSIFICATION_APPROACH = ('MEAT_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    SIDE_CLASSIFICATION_WEIGHTS_PATH = ('SIDE_CLASSIFICATION_WEIGHTS_PATH','data/models/side/weight.pt')
    SIDE_CLASSIFICATION_APPROACH = ('SIDE_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    BRUISE_CLASSIFICATION_WEIGHTS_PATH = ('BRUISE_CLASSIFICATION_WEIGHTS_PATH','data/models/bruise/weight.pt')
    BRUISE_CLASSIFICATION_APPROACH = ('BRUISE_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    STAMP_CLASSIFICATION_WEIGHTS_PATH = ('STAMP_CLASSIFICATION_WEIGHTS_PATH','data/models/stamp/weight.pt')
    STAMP_CLASSIFICATION_APPROACH = ('STAMP_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    CONFORMATION_CLASSIFICATION_WEIGHTS_PATH = ('STAMP_CLASSIFICATION_WEIGHTS_PATH', 'data/models/conformation/weight.pt')
    CONFORMATION_CLASSIFICATION_APPROACH = ('STAMP_CLASSIFICATION_APPROACH', DetectionApproachEnum.ULTRALYTICS.value)

    SIDE_A_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH = ('SIDE_A_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH','data/models/cuts/model_A.dat')
    SIDE_B_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH = ('SIDE_B_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH','data/models/cuts/model_B.dat')

    GREASE_CLASSIFICATION_WEIGHTS_PATH = ('GREASE_CLASSIFICATION_WEIGHTS_PATH','data/models/grease/weight.sav')
    GREASE_CLASSIFICATION_APPROACH = ('GREASE_CLASSIFICATION_APPROACH',DetectionApproachEnum.PICKLE.value)

    FILTER_BLACK_LIST = ('FILTER_BLACK_LIST',['','VIRADA_TOTAL', 'VIRADA_PARCIAL', 'ANGULADA_COSTELA_BANDA_A', 'ANGULADA_COSTELA_BANDA_B'])

    SYSTEM_VERSION = ('SYSTEM_VERSION','PROFESSIONAL')

    IMAGES_MAIN_PATH = ('IMAGES_MAIN_PATH','/home/ecotrace/fotos')

    IMAGES_ENDPOINT = ('IMAGES_ENDPOINT','http://localhost:3333/fotos')

    INTEGRATION_ENDPOINT = ('INTEGRATION_ENDPOINT','')

    MAX_PROCESSING_ATTEMPTS = ('MAX_PROCESSING_ATTEMPTS','')

    MEAT_CLASSIFIER_MAX_WORKERS = ('MAX_WORKERS', 5)

    INTEGRATOR_MAX_WORKERS = ('MAX_WORKERS', 1)

    DETECTION_PADDING = ('DETECTION_PADDING',350)

    BRUISE_CONFIDENCE_THRESHOLD = ('BRUISE_CONFIDENCE_THRESHOLD',0.20)

    BRUISE_PLOT_RADIUS = ('BRUISE_PLOT_RADIUS',0.80)

    WATERMARK_LOGO_PATH = ('WATERMARK_LOGO_PATH','data/images/watermark_logo.png')

    GENERATE_WATERMARK = ('GENERATE_WATERMARK',0)

    PIXEL_CENTIMETER_RATIO = ('PIXEL_CENTIMETER_RATIO', 0.14699525800946367 )

    MODULE_CONFORMATION_PREDICTION = ('PIXEL_CENTIMETER_RATIO', False)

    MODULE_GREASE_PREDICTION = ('MODULE_GREASE_PREDICTION', False)

    MODULE_SIZE_PREDICTION = ('MODULE_SIZE_PREDICTION', False)

    def __init__(self, key, value):
        self._key = key
        self._value = value

    @property
    def key(self):
        return self._key

    @property
    def value(self):
        return self._value

    @classmethod
    def get_value(cls, key):
        for item in cls:
            if item.key == key:
                return item.value
        raise KeyError(f'Key {key} not found in ConfigurationEnum.')

