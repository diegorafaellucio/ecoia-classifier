from enum import Enum


from src.enum.detection_approach_enum import DetectionApproachEnum

class ConfigurationEnum(Enum):


    SKELETON_CLASSIFICATION_WEIGHTS_PATH = ('SKELETON_CLASSIFICATION_WEIGHTS_PATH','data/models/skeleton/weight.pt')
    SKELETON_CLASSIFICATION_APPROACH = ('SKELETON_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    FILTER_CLASSIFICATION_WEIGHTS_PATH = ('FILTER_CLASSIFICATION_WEIGHTS_PATH','data/models/filter/weight.pt')
    FILTER_CLASSIFICATION_APPROACH = ('FILTER_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    MEAT_CLASSIFICATION_WEIGHTS_PATH = ('MEAT_CLASSIFICATION_WEIGHTS_PATH','data/models/meat/weight.pt')
    MEAT_CLASSIFICATION_APPROACH = ('MEAT_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    SIDE_CLASSIFICATION_WEIGHTS_PATH = ('SIDE_CLASSIFICATION_WEIGHTS_PATH','data/models/side/weight.pt')
    SIDE_CLASSIFICATION_APPROACH = ('SIDE_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    BRUISE_CLASSIFICATION_WEIGHTS_PATH = ('BRUISE_CLASSIFICATION_WEIGHTS_PATH','data/models/bruise/weight.pt')
    BRUISE_CLASSIFICATION_APPROACH = ('BRUISE_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)
    BRUISE_CLASSIFICATION_CONFIDENCE_THRESHOLD = ('BRUISE_CLASSIFICATION_CONFIDENCE_THRESHOLD', 0.20)
    BRUISE_CLASSIFICATION_PLOT_RADIUS = ('BRUISE_PLOT_RADIUS', 0.80)

    STAMP_CLASSIFICATION_WEIGHTS_PATH = ('STAMP_CLASSIFICATION_WEIGHTS_PATH','data/models/stamp/weight.pt')
    STAMP_CLASSIFICATION_APPROACH = ('STAMP_CLASSIFICATION_APPROACH',DetectionApproachEnum.ULTRALYTICS.value)

    CONFORMATION_CLASSIFICATION_WEIGHTS_PATH = ('STAMP_CLASSIFICATION_WEIGHTS_PATH', 'data/models/conformation/weight.pt')
    CONFORMATION_CLASSIFICATION_APPROACH = ('STAMP_CLASSIFICATION_APPROACH', DetectionApproachEnum.ULTRALYTICS.value)

    SIDE_A_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH = ('SIDE_A_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH','data/models/cuts/model_A.dat')
    SIDE_B_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH = ('SIDE_B_SHAPE_PREDICTOR_WEIGHTS_FILE_PATH','data/models/cuts/model_B.dat')

    GREASE_CLASSIFICATION_WEIGHTS_PATH = ('GREASE_CLASSIFICATION_WEIGHTS_PATH','data/models/grease/weight.sav')
    GREASE_CLASSIFICATION_APPROACH = ('GREASE_CLASSIFICATION_APPROACH',DetectionApproachEnum.PICKLE.value)

    HUMP_CLASSIFICATION_WEIGHTS_PATH = ('HUMP_CLASSIFICATION_WEIGHTS_PATH', 'data/models/hump/weight.pt')
    HUMP_CLASSIFICATION_APPROACH = ('HUMP_CLASSIFICATION_APPROACH', DetectionApproachEnum.ULTRALYTICS.value)

    BREED_CLASSIFICATION_WEIGHTS_PATH = ('BREED_CLASSIFICATION_WEIGHTS_PATH', 'data/models/breed/weight.pt')
    BREED_CLASSIFICATION_APPROACH = ('BREED_CLASSIFICATION_APPROACH', DetectionApproachEnum.ULTRALYTICS.value)

    RUMP_CLASSIFICATION_WEIGHTS_PATH = ('RUMP_CLASSIFICATION_WEIGHTS_PATH', 'data/models/rump/weight.pt')
    RUMP_CLASSIFICATION_APPROACH = ('RUMP_CLASSIFICATION_APPROACH', DetectionApproachEnum.ULTRALYTICS.value)

    MEAT_CLASSIFIER_MODULE_IS_ACTIVE = ('MEAT_CLASSIFIER_MODULE_IS_ACTIVE', False)

    MEAT_CLASSIFIER_MODULE_ENDPOINT = ('MEAT_CLASSIFIER_MODULE_ENDPOINT', "http://127.0.0.1:8000/classifier/classify")

    MEAT_CLASSIFIER_MODULE_INTERVAL_DELAY = ('MEAT_CLASSIFIER_MODULE_INTERVAL_DELAY', 2)

    MEAT_CLASSIFIER_MAX_WORKERS = ('MEAT_CLASSIFIER_MAX_WORKERS', 1)

    INTEGRATOR_MODULE_IS_ACTIVE = ('INTEGRATOR_MODULE_IS_ACTIVE', False)

    INTEGRATOR_MODULE_ENDPOINT = ('INTEGRATOR_MODULE_ENDPOINT', "http://127.0.0.1:8000/integrator/integrate")

    INTEGRATOR_MODULE_INTERVAL_DELAY = ('INTEGRATOR_MODULE_INTERVAL_DELAY', 2)

    INTEGRATOR_MAX_WORKERS = ('INTEGRATOR_MAX_WORKERS', 1)

    JOBS_WAKEUP_DELAY = ('JOBS_WAKEUP_DELAY', 10)

    FILTER_BLACK_LIST = ('FILTER_BLACK_LIST', ['VIRADA_TOTAL', 'VIRADA_PARCIAL', 'ANGULADA_COSTELA_BANDA_A', 'ANGULADA_COSTELA_BANDA_B', "BANDA_B_ANGULADA_COSTELA", "BANDA_A_ANGULADA_COSTELA"])

    DEVICE = ('DEVICE', 'cpu')

    MODELS_PATH = ('MODELS_PATH', 'data/models')

    IMAGES_MAIN_PATH = ('IMAGES_MAIN_PATH', '/home/ecotrace/fotos')

    IMAGES_ENDPOINT = ('IMAGES_ENDPOINT', 'http://localhost:3333/fotos')

    INTEGRATION_ENDPOINT = ('INTEGRATION_ENDPOINT', '')

    DETECTION_PADDING = ('DETECTION_PADDING', 350)

    MODULE_GENERATE_WATERMARK = ('MODULE_GENERATE_WATERMARK', False)
    MODULE_GENERATE_WATERMARK_LOGO_PATH = ('MODULE_GENERATE_WATERMARK_LOGO_PATH', 'data/images/watermark_logo.png')

    MODULE_SIZE_PREDICTION = ('MODULE_SIZE_PREDICTION', True)
    MODULE_SIZE_PREDICTION_PIXEL_CENTIMETER_RATIO = ('MODULE_SIZE_PREDICTION_PIXEL_CENTIMETER_RATIO', 0.14699525800946367)

    MODULE_CONFORMATION_PREDICTION = ('MODULE_CONFORMATION_PREDICTION', False)

    MODULE_GREASE_PREDICTION = ('MODULE_GREASE_PREDICTION', False)

    MODULE_HUMP_PREDICTION = ('MODULE_HUMP_PREDICTION', False)

    MODULE_BREED_PREDICTION = ('MODULE_BREED_PREDICTION', False)

    MODULE_RUMP_CLASSIFICATION = ('MODULE_RUMP_CLASSIFICATION', False)

    SLAUGHTER_START_HOUR = ('SLAUGHTER_START_HOUR', 4)

    SLAUGHTER_FINISH_HOUR = ('SLAUGHTER_FINISH_HOUR', 4)

    CLIENT_IDENTIFIER = ('CLIENT_IDENTIFIER', 'default')

    PLANT_IDENTIFIER = ('PLANT_IDENTIFIER', 'default')

    def __init__(self, key, value):
        self._key = key
        self._value = value

    @property
    def key(self):
        return self._key

    @property
    def value(self):
        return self._value

    @classmethod
    def get_value(cls, key):
        for item in cls:
            if item.key == key:
                return item.value
        raise KeyError(f'Key {key} not found in ConfigurationEnum.')

